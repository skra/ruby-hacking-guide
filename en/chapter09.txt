$comment(-*- coding: utf-8 -*- vim: set encoding=utf-8:)$
Translation: First version Vincent ISAMBART
             Second version Sebastian Krause

h1. Chapter 9: `yacc` crash course

h2. Overview

h3. Parser and Scanner

How to write a programming language parser has been researched since
the ancient times of computing. There is one established tactic for this task.
The problem can be solved by applying this tactic, provided the grammar is not too strange or ambiguous.

First, at the lowest level, the character string is split up into a string
of words (called tokens). This is done by the so-called scanner or lexer. 
It's also called a "lexical analyzer" but we just say scanner here.

Scanners are based on the principle that blank characters should deliminate words. 
Actually, most programming languages work like that, as this is the most convenient way.

A counterexample is the old Fortran, where white
spaces had no meaning. That meant that words couldn't be separated by white space
and white space could appear in the middle of a variable. 
It was tedious to analyze and compiler vendors started to ignore this standard.
At last Fortran 90 followed this trend and it became standard that white spaces have an effect.

By the way, it seems the reason white spaces had not meaning in
Fortran 77 was that when writing programs on punch cards it was easy
to make errors in the number of spaces.

h3. The Symbol String

I said that the scanner spits out tokens, but, to be
exact, what the scanner generates are "symbols".

What are symbols? Let's take numbers as an example. In a programming
language, 1, 2, 3, 99 are all "numbers". They can all be handled the
same way by the grammar. Where we can write 1, we can also write 2 or
3. That's why the parser does not need to handle them differently. For numbers, "number" is enough.

These "number", "identifier" and so on can be subsumed as
symbols. Be careful not to mix these with the symbols from the `Symbol` class.

The scanner first splits the string into words and determines what
their symbols are. For example, `NUMBER` or `DIGIT` for numbers,
`IDENTIFIER` for names like "`name`", `IF` for the reserved word
`if`. These symbols then pass on to the next phase.

h3. The Parser Generator

The string of words and symbols which comes out of the scanner will be
assembled as a tree, the so-called syntax tree.

The name "parser" is sometimes used to include both the scanning
and the creation of the syntax tree. However, we will use "parser" 
in the narrow sense, as the device which creates the syntax tree. How does this
parser make a tree from the list of symbols? In other words, on what
should we focus to discover the tree?

For one, we could focus on the meaning of the words. For example,
suppose we find the word `var`. If local
variable `var` has been defined before, we know that it's a reference
to the local variable.

Or we could focus on only what we see. For example, if after
an identifier comes a `=`, we know that it's an assignment. If
the keyword `if` appears, we know that it's the beginning of an
`if` statement.

The latter method, focusing only on what we see, is the current
trend. In other words the language must be designed in such a way, that it can be analyzed
 by only looking at the list of symbols. This method is simpler and can be more easily generalized.
Therefore an automatizing tool can be used. This tool is called a parser generator.

The most used parser generator under UNIX is `yacc`. Ruby goes with the majority, it is
also written in `yacc`. The input file
is `parser.y`. In order to read the Ruby parser, we need
to understand `yacc` to some extent.  (Note: Starting from 1.9, `ruby`
requires `bison` instead of `yacc`. However, `bison` is mainly `yacc`
with additional functionality, so this does not diminish the interest
of this chapter.)

In this chapter the basics of  `yacc` are explained. We only cover what's necessary to understand `parse.y`. 
If you want to know more about parsers and
parser generators I recommend a book I wrote called "Rubyを256倍使
うための本 無道編" (The book to use 256 times more of Ruby ).  I do not recommend it because I wrote it, but
because it's the easiest book to understand this subject. And besides,
it's a bargain. 

Nevertheless, if you would like a book from someone else (or can't
read Japanese), I recommend O'Reilly's "lex & yacc programming" by
John R. Levine, Tony Mason and Doug Brown. And if you are still not
satisfied, you can also read "Compilers" (also known as the "dragon
book" because of the dragon on its cover) by Alfred V. Aho, Ravi Sethi
and Jeffrey D. Ullman.

h2. Grammar

h3. Grammar file

The input file for `yacc` is called the grammar file, as it's the file
where the grammar is written. The convention is to give the grammar
file the suffix `*.y`. It will be given to `yacc` which will generate C source
code. This file can then be compiled as usual (figure 1 shows the full
process).

!images/ch_yacc_build.png(File dependencies)!

The output file name is always `y.tab.c` and can't be changed. 
Recent versions of `yacc` allow to change it by an option, 
but for compatibility's sake it is safer to keep `y.tab.c`. By the
way, it seems the `tab` of `y.tab.c` comes from `table`, as lots of
huge tables are defined in it. We should now have a look at the file.

The grammar file's content has the the following form:

▼ General form of the grammar file
<pre class="longlist">
%{
Header
%}
%union ....
%token ....
%type ....

%%
Rules part
%%
User defined part
</pre>

`yacc`'s input file is divided by '%%' into 3 parts. The first
part is called the definition part, there various definitions and
configurations are written down. Between `%{` and `%}` we can write arbitrary C code, like
for example necessary macros. After that, the instructions starting
with `%` are special `yacc` instructions. We'll explain them below when
they come up.

The middle part of the file is called the rules part, and is the most
essential part for `yacc`. It's where the grammar is that we want
to parse. We'll explain it in detail in the next paragraph.

The last part of the file, the user defined part, can be used freely
by the user. `yacc` just copies this part verbatim into the output
file. It's used for example to place auxilliary routines which are needed by the
parser.

h3. What `yacc` does

What `yacc` takes care of is mainly the rules part in the
middle. `yacc` takes the grammar written there and uses it to make a
function called `yyparse()`. It's the parser in the narrow sense.

Only in the narrow sense, so a scanner is still needed. However, `yacc`
won't take care of it, the user has to provide it. The function for
the scanner is named `yylex()`.

Furtermore, what `yacc` generates in `yyparse()` is only the essential part. 
The "actions" we'll mention later are out of its scope. You might
think, that `yacc`'s contribution is too small, but that's not the
case. This "core part" is so important that `yacc`
survived to this day in spite of complains about it.
But what is this core part now? That's what we're going to see.

h3. The Backus-Naur-Form

Suppose we want to write a parser in C, then its code will contain statements
like "a string goes from here to there, make this an `if` statement..." and so on.
 When using a parser generator, we go the other way round and say "I would like to parse this
grammar." Doing this creates for us a parser to handle the
grammar. This means telling the specification gives us the
implementation. That's so convenient about `yacc`.

But how can we write down the specification? As for `yacc`, the description method
used is the BNF (Backus-Naur Form). Let's look at an elementary example.

<pre class="emlist">
if_stmt: IF expr THEN stmt END
</pre>

Look at what's left and right of the colon. It means 
that the left part `if_stmt` equals the right part or

`if_stmt` and `IF expr THEN stmt END` are equivalent.

Here, `if_stmt`, `IF`, `expr`... are all "symbols". `expr` is the
abbreviation of `expression`, `stmt` of `statement`. Looks like
the definition of the if-statement.

A single definition is called a rule. The part at the left of "`:`" is
called the left side and the right part called the right side. This is
quite easy to remember.

O well, something is missing. An `if` statement should have an
 `else`. And even if we can write `else`, we don't always
want to it. In this case we can do the following:

<pre class="emlist">
if_stmt: IF expr THEN stmt END
       | IF expr THEN stmt ELSE stmt END
</pre>

"`|`" means "or".

`if_stmt` is either "`IF expr THEN stmt END`" or "`IF expr THEN stmt
ELSE stmt END`".

That's it.

Pay attention to the split done by
`|`. By doing this, one more rule is added. 
In fact, it's only an abbreviation for repeating the left hand side.
The example above has exactly the same meaning as the following:

<pre class="emlist">
if_stmt: IF expr THEN stmt END
if_stmt: IF expr THEN stmt ELSE stmt END
</pre>

So two rules are defined in the example.

This is not enough to complete the definition of the `if`
statement. That's because the symbols `expr` and `stmt` are not sent
by the scanner, rules must be defined. To be closer to Ruby, let's
boldly add some rules.

<pre class="emlist">
stmt   : if_stmt
       | IDENTIFIER '=' expr   /* assignment */
       | expr

if_stmt: IF expr THEN stmt END
       | IF expr THEN stmt ELSE stmt END

expr   : IDENTIFIER       /* reading a variable */
       | NUMBER           /* integer constant */
       | funcall          /* FUNction CALL */

funcall: IDENTIFIER '(' args ')'

args   : expr             /* only one parameter */
</pre>

I used two new elements. First, comments of the same form as in C, and
character expressed using `'='`. This `'='` is also of course a
symbol. Symbols like "=" are different from numbers as there is only
one variety for them. That's why for symbols where can also use `'='`.
It would be great to be able to use for strings for, for example,
reserved words, but due to limitations of the C language this cannot
be done.

We add rules like this, to the point we complete writing all the
grammar. With `yacc`, the left side of the first written rule is "the
whole grammar we want to express". So in this example, `stmt`
expresses the whole program.

It was a little too abstract. Let's explain this a little more
concretely. By "`stmt` expresses the whole program", I mean `stmt` and
the rows of symbols expressed as equivalent by the rules, are all
recognized as grammar. For example, `stmt` and `stmt` are
equivalent. Of course. Then `expr` is equivalent to `stmt`. That's
expressed like this in the rule. Then, `NUMBER` and `stmt` are
equivalent. That's because `NUMBER` is `expr` and `expr` is `stmt`.

We can also say that more complicated things are equivalent.

<pre class="emlist">
              stmt
               ↓
             if_stmt
               ↓
      IF expr THEN stmt END
          ↓        ↓
IF IDENTIFIER THEN expr END
                    ↓
IF IDENTIFIER THEN NUMBER END
</pre>

In the statement developed here, at the end all symbols are ones sent
by the scanner. That means this expression is a correct program. Or
putting it the other way around, if this sequence of symbols is sent
by the scanner, the parser will understand it in the opposite way it
was developed.

<pre class="emlist">
IF IDENTIFIER THEN NUMBER END
                    ↓
IF IDENTIFIER THEN expr END
          ↓        ↓
      IF expr THEN stmt END
               ↓
             if_stmt
               ↓
              stmt
</pre>

And `stmt` is a symbol expressing the whole program. That's why this
sequence of symbols is a correct program for the parser. When it's the
case, the parsing routine `yyparse()` ends returning 0.

By the way, the technical term expressing that the parser succeeded is
that it "accepted" the input. The parser is like a government office:
if you do not fill the documents in the boxes exactly like he asked
you to, he'll refuse them. The accepted sequences of symbols are the
ones for which the boxes where filled correctly. Parser and government
office are strangely similar for instance in the fact that they care
about details in specification and that they use complicated terms.

h3. Terminal symbols and nonterminal symbols

Well, in the confusion of the moment I used without explaining it the
expression "symbols coming from the scanner". So let's explain this. I
use one word "symbol" but there are two types.

The first type of the symbols are the ones sent by the scanner. They
are for example, `IF`, `THEN`, `END`, `'='`, ... They are called
terminal symbols. That's because like before when we did the quick
expansion we find them aligned at the end. In this chapter terminal
symbols are always written in capital letters. However, symbols like
`'='` between quotes are special. Symbols like this are all terminal
symbols, without exception.

The other type of symbols are the ones that never come from the
scanner, for example `if_stmt`, `expr` or `stmt`. They are called
nonterminal symbols. As they don't come from the scanner, they only
exist in the parser. Nonterminal symbols also always appear at one
moment or the other as the left side of a rule. In this chapter,
nonterminal symbols are always written in lower case letters.

h3. How to test

I'm now going to tell you the way to process the grammar file with
`yacc`.

<pre class="emlist">
%token A B C D E
%%
list: A B C
    | de

de  : D E
</pre>

First, put all terminal symbols used after `%token`. However, you do
not have to type the symbols with quotes (like `'='`). Then, put `%%`
to mark a change of section and write the grammar. That's all.

Let's now process this.

<pre class="screen">
% yacc first.y
% ls
first.y  y.tab.c
%
</pre>

Like most Unix tools, "silence means success".

There's also implementations of `yacc` that need semicolons at the end
of (groups of) rules. When it's the case we need to do the following:

<pre class="emlist">
%token A B C D E
%%
list: A B C
    | de
    ;

de  : D E
    ;
</pre>

I hate these semicolons so in this book I'll never use them.

h3. Void rules

Let's now look a little more at some of the established ways of
grammar description. I'll first introduce void rules.

<pre class="emlist">
void:
</pre>

There's nothing on the right side, this rule is "void". For example,
the two following `target`s means exactly the same thing.

<pre class="emlist">
target: A B C

target: A void B void C
void  :
</pre>

What is the use of such a thing? It's very useful. For example in the
following case.

<pre class="emlist">
if_stmt : IF expr THEN stmts opt_else END

opt_else:
        | ELSE stmts
</pre>

Using void rules, we can express cleverly the fact that "the `else`
section may be omitted". Compared to the rules made previously using
two definitions, this way is shorter and we do not have to disperse
the burden.

h3. Recursive definitions

The following example is still a little hard to understand.

<pre class="emlist">
list: ITEM         /* rule 1 */
    | list ITEM    /* rule 2 */
</pre>

This expresses a list of one or more items, in other words any of the
following lists of symbols:

<pre class="emlist">
ITEM
ITEM ITEM
ITEM ITEM ITEM
ITEM ITEM ITEM ITEM
      :
</pre>

Do you understand why? First, according to rule 1 `list` can be read
`ITEM`. If you merge this with rule 2, `list` can be `ITEM ITEM`.

<pre class="emlist">
list: list ITEM
    = ITEM ITEM
</pre>

We now understand that the list of symbols `ITEM ITEM` is similar to
`list`. By applying again rule 2 to `list`, we can say that 3 `ITEM`
are also similar to `list`. By quickly continuing this process, the
list can grow to any size.

I'll now show you the next example. The following example expresses
the lists with 0 or more `ITEM`.

<pre class="emlist">
list:
    | list ITEM
</pre>

First the first line means "`list` is equivalent to (void)". By void I
mean the list with 0 `ITEM`. Then, by looking at rule 2 we can say
that "`list ITEM`" is equivalent to 1 `ITEM`. That's because `list` is
equivalent to void.

<pre class="emlist">
list: list   ITEM
    = (void) ITEM
    =        ITEM
</pre>

By applying the same operations of replacement multiple times, we can
understand that `list` is the expression a list of 0 or more items.

With this knowledge, "lists of 2 or more `ITEM`" or "lists of 3 or
more `ITEM`" are easy, and we can even create "lists or an even number
of elements".

<pre class="emlist">
list:
    | list ITEM ITEM
</pre>

h2. Construction of values

Enough already with the abstract talk. Now to a more concrete topic.

h3. Shift and reduce

We have only seen how to write the grammar, but we
want to be able to build the full syntax tree.
But unfortunately the syntax tree will not be build by just 
passing the rules. This time we add a little bit to the rules
to build the syntax tree.

First let's see what the parser does during execution. We use
the following simple grammar as an example.

<pre class="emlist">
%token A B C
%%
program: A B C
</pre>

In the parser there is a stack called the semantic stack. The parser
pushes on it all the symbols coming from the scanner. This move is
called "shift" of symbol.

<pre class="emlist">
[ A B ] ← C   shift
</pre>

When a right side of a rule equals the tail of the stack,
a "reduce" is invoked: on the stack 
the right hand side of the rule is replaced by the left hand side.

<pre class="emlist">
[ A B C ]
    ↓         reduce
[ program ]
</pre>

This move is called "a reduction of `A B C`" to `program`". 

This term
is a little presomptious
言葉は偉そうだがようするに白發中が揃うと大三元になるようなものだ。
……それは違うか。
(Note: Don't understand this but it's surely not important)

`program` displays a complete program. So if input stops when only 
`program` is on the stack, the input will be accepted.

Let's try out a bit more complicated grammar.

<pre class="emlist">
%token IF E S THEN END
%%
program : if

if      : IF expr THEN stmts END

expr    : E

stmts   : S
        | stmts S
</pre>

The input to the scanner is this.

<pre class="emlist">
IF  E  THEN  S  S  S  END
</pre>

The transition of the semantic stack is shown below.

|Stack|Operation|
||first the stack is empty|
|`IF`|shift `IF`|
|`IF E`|shift `E`|
|`IF expr`|reduce `E`→`expr`|
|`IF expr THEN`|shift `THEN`|
|`IF expr THEN S`|shift `S`|
|`IF expr THEN stmts`|reduce `S`→`stmts`|
|`IF expr THEN stmts S`|shift `S`|
|`IF expr THEN stmts`|reduce `stmts S`→`stmts`|
|`IF expr THEN stmts S`|shift `S`|
|`IF expr THEN stmts`|reduce `stmts S`→`stmts`|
|`IF expr THEN stmts END`|shift `END`|
|`if`|reduce `IF expr THEN stmts END`→`if`|
|`program`|reduce `if`→`program`|
||accept.|

Note one more thing. The symbols will not always decrease.
It might also happen that a symbol is generated from an empty rule.

h3. Actions

Now, this will be important. There's no point in just wandering around
the semantic stack while shifting and reducing. Because our goal 
in the end is the creation of the syntax tree, it's a bit troublesome that
it hadn't been mentioned yet. How will `yacc` take up the 
slack? "Let's provide a hook when the parser reduces" 
answers 'yacc'. That hook is called the action of the parser.
The action is written after the rule like this:

<pre class="emlist">
program: A B C { /* here comes the action */ }
</pre>

The part within the braces is the action. The moment
`A B C` are reduced to `program` the action is executed. The action
is pretty much arbitrary C code.

h3. Value of symbols

This is also important. To each symbol there's a value attached. 
To terminal symbols as well as to non-terminal symbols. As terminal symbols 
come from the scanner the value is delivered by the scanner. This is 
for example for a `NUMBER` 1 or 9 or 108. For an `IDENTIFIER` it could be
`"attr"` or `"name"` or `"sym"`. This value is put on the semantic stack
together with the symbol. The following figure is a sketch of the stack
when `S` and it's value were just put on top.

<pre class="emlist">
IF     expr      THEN      stmts     S
value  value     value     value     value
</pre>

With the rules from above `stmts S` is reduced to `stmts`. When there's 
an action for this rule, it will be executed and the values of the
symbols from the right-hand side will be passed.

<pre class="emlist">
IF    expr   THEN   stmts  S      /* stack */
value1   value2    value3    value4    value5
                    ↓     ↓
            stmts:  stmts  S      /* rule */
                    ↓     ↓
                  { $1  +  $2; }  /* action */
</pre>

As sketched above `$1`, `$2`, `$3`... can be assigned to the
values of the corresponding symbols on the right hand side.
The expressions `$1`,`$2` will be rewritten by `yacc` 
to expressions which refer to the stack. However, in C there
are types and such, but for now just assume they are `int`.

Now the symbol on the left hand side is put in place, but all symbols
have values so there must also be a value attached to the symbol on
the left hand side. That is expressed in the action by `$$`. 
The value `$$` which exits the action becomes the value of the 
symbol on the left hand side.

<pre class="emlist">
IF    expr   THEN   stmts  S      /* The stack before a reduce */
value1   value2    value3    value4    value5
                    ↓     ↓
            stmts:  stmts  S      /* The rule which matches the tail of the right hand side */
              ↑    ↓     ↓
            { $$  = $1  +  $2; }  /* The corresponding action */

IF    expr   THEN   stmts         /* The stack after reduce */
value1   value2    value3    (value4+value5)
</pre>

A superfluous comment: The value of a symbol is also called semantic value.
That's why the stack where these values are entered is called semantic value stack or short semantic stack.

h3. `yacc` and type

It's really annoying but we have to talk about the type before we finish.
So what's the type of a symbol's value? It has a type called `YYSTYPE`.
This is probably an abbreviation of `YY Stack TYPE` or `Semantic value TYPE`.
And `YYSTYPE` is of course a `typedef` of another type. This type is 
designated in the definition part by `%union`.

But we haven't written `%union` in the examples before. Why didn't an error occur?
`yacc` took care of it and assumed the default type. And that's of course
`int` in C. So the default of `YYSTYPE` is `int`.

`int` is sufficient for examples from a book or a calculator but for constructing
a syntax tree, we want to use structures and pointers. In this case
we might use `%union` as shown below. 

<pre class="emlist">
%union {
    struct node {
        int type;
        struct node *left;
        struct node *right;
    } *node;
    int num;
    char *str;
}
</pre>

We don't really want to use it so the member names are made up. 
Be careful that a semicolon at the end is not 
necessary.

With the above `y.tab.c` becomes like this:

<pre class="emlist">
typedef union {
    struct node {
        int type;
        struct node *left;
        struct node *right;
    } *node;
    int num;
    char *str;
} YYSTYPE;
</pre>

The semantic stack will then probably be something like this.

<pre class="emlist">
YYSTYPE yyvs[256];       /* the stack itself (yyvs = YY Value Stack) */
YYSTYPE *yyvsp = yyvs;   /* pointer to the tip of the stack */
</pre>

And the value 

And the semantic value in the action will surely become like this:

<pre class="emlist">
/* The action before yacc processed it */
target: A B C { func($1, $2, $3); }

/* After the change, as it appears in y.tab.c*/
{ func(yyvsp[-2], yyvsp[-1], yyvsp[0]); ;
</pre>

Here we used the default type `int`, but if we use the union
type `YYSTYPE` we also have to declare the member. There are 
two methods to attach a unit to certain symbols. 

First there's the a general method to declare symbol units.
For terminal symbols `%token` is used  and for non-terminal
symbols `%type` is used.

<pre class="emlist">
%token<num> A B C    /* All the values of A B C are of type int */
%type<str> target    /* All the values of target are char* */
</pre>

On the other hand one can always declare the member name in between the '$' signs:

<pre class="emlist">
%union { char *str; }
%%
target: { $<str>$ = "in short something like a cast"; }
</pre>

One should avoid this method. In principle the member should be determined by the symbol unit.

h3. Connection between parser and scanner

Now we mentioned everything what was to say about values.
We still need to talk about the connection protocol between parser and scanner.
Then all essential points will have been covered.

As you might remember, the scanner function was `yylex()`.
The return value of this function is a terminal symbol in `int`.
`yacc` provides constant of the same name in a `#define` line.
So for a symbol `NUMBER` wer can just write `NUMBER`. Its value is 
passed in the global variable `yylval`. The type of `yylval`
is `YYSTYPE`. We can say pretty much the same as above. So
the union type is defined with `%union`. But here the members
aren't chosen automatically. We have to provide them ourselves.
Let's look at an extremely simple example.

<pre class="emlist">
static int
yylex()
{
    yylval.str = next_token();
    return STRING;
}
</pre>

Check out the relationships shown in Fig.2. The variables
`yylval`, `$$`, `$1`,... which form the interface, are
all of type `YYSTYPE`.

!images/ch_yacc_yaccvars.png(`yacc` interface variables and functions)!

h3. Embedded Actions

We said that an action comes after a rule but it can also
be put inside a rule.

<pre class="emlist">
target: A B { puts("embedded action"); } C D
</pre>

This is called an embedded action. An embedded action is 
simply syntactic sugar of the following notation.

<pre class="emlist">
target: A B dummy C D

dummy :     /* empty rule */
        {
            puts("embedded action");
        }
</pre>

The execution time should be clear. The symbol's value is also taken normally.
In the example above the value of the action comes out as `$3`.

h2. Pragmatic Topics

h3. Collision

If you just thought: "Now I won't fear `yacc` anymore", you're naive.
The reason why `yacc` is still scary, comes below.

We wrote nonchalantly "The rules on the right hand are matched to the stack",
but what if there's a rule like the following:

<pre class="emlist">
target  : A B C
        | A B C
</pre>

If there's a symbol string of the form `A B C` we don't know anymore
which rule is matched. Humans can't understand this and `yacc` doesn't do
either. If `yacc` discovers a weird grammar like that it complains with a `reduce/reduce conflict`.
It means that more than one rule can be applied for reducing.

<pre class="screen">
% yacc rrconf.y
conflicts:  1 reduce/reduce
</pre>

The example above would only come up by mistake.
But what about the following notation? It describes
exactly the same symbol string.

<pre class="emlist">
target  : abc
        | A bc

abc     : A B C

bc      :   B C
</pre>

This isn't too far fetched. Especially it might come
up unintentionally when one fiddles with the rules.

The next pattern is similar.

<pre class="emlist">
target  : abc
        | ab C

abc     : A B C

ab      : A B
</pre>

Assume there's a symbol string `A B C`. Should `abc` be applied or 
should `ab` together with `C` be applied? In this case `yacc`
complains with a `shift/reduce conflict`. It means that either a rule for a shift
or a rule for a reduce can be applied.

<pre class="screen">
% yacc srconf.y
conflicts:  1 shift/reduce
</pre>

A famous `shift/reduce conflict` is the "dangling `else` problem.
It occurs for instance in an `if` statement in C. Let's put it 
down simplified. 

<pre class="emlist">
stmt     : expr ';'
         | if

expr     : IDENTIFIER

if       : IF '(' expr ')' stmt
         | IF '(' expr ')' stmt  ELSE stmt
</pre>

式は`IDENTIFIER`(変数)だけ、`if`の本体は文一つだけとして規則を作ってみた。
Now, when we parse the following program to this grammar, what will happen?

<pre class="emlist">
if (cond)
    if (cond)
        true_stmt;
    else
        false_stmt;
</pre>

It looks obvious on first glance, but we can also
interpret it like this:

<pre class="emlist">
if (cond) {
    if (cond)
        true_stmt;
}
else {
    false_stmt;
}
</pre>

So the problem is, whether the `else` belongs to the inner or the outer
`if`.

However, compared to a `reduce/reduce conflict` the a `shift/reduce conflict`
is a relatively harmless collision. That's because in most cases it can be resolved
by choosing the shift. Choosing the shift is often analogous to preferably connecting close elements.
This matches human intuition. The dangling `else` can also be resolved in this way.
That's why `yacc` also chooses `shift` by `default` whenever a `shift/reduce conflict` comes up.

h3. Look Ahead

We try out the following `yacc` grammar.

<pre class="emlist">
%token A B C
%%
target  : A B C   /* rule 1 */
        | A B     /* rule 2 */
</pre>

Looks like it will collide. When `A B` are read in rule 1
will say shift and rule 2 will say reduce.
So this should become a 'shift/reduce conflict', but...

どう考えても衝突しそうではないだろうか。`A B`まで読んだ時点で
規則1はシフトしたがるし、規則2は還元したがる。
つまりこれはshift/reduce conflictになるはずだ。ところが……

<pre class="screen">
% yacc conf.y
%
</pre>

Strange, no conflict. Why is that?

Actually the parser, which `yacc` generates, can 
look one symbol ahead.
Before executing a shift or reduce it peeks ahead one symbol and 
decides what to do.

実を言うと`yacc`で作ったパーサは記号を一つだけ
「先読み(look ahead)」できる。
本当にシフトや還元をする前に次の記号を盗み見て、どうするか判断
できるのだ。

[...] For instance with the rules from before: If after `A B` a `C`
comes it can only be rule 1, which means "shift" is chosen. 
If the input stops rule 2 is chosen ("reduce").
だからパーサ生成時にもそれを考慮してくれて、一つの先読みで区別
できるなら衝突させない。例えば先程の規則なら`A B`の次に`C`が来れば
規則1しか可能性はないので規則1を選ぶ(シフトする)。入力が終わっ
たら規則2を選ぶ(還元する)。

Note that "look ahead" has two meanings.
The first one is that `yacc` reads ahead when processing the `*.y`-file.
The second one is that the generated parser will read ahead when invoked.
The read ahead while executing is not too difficult but the read ahead
of `yacc` itself is extraordinarily complex. 
注意してほしいのは「先読み」という単語には二通りの意味があることだ。
一つは`yacc`で`*.y`を処理するときの先読み。もう一つは生成したパーサを
実際に動かすときの先読み。実行時の先読みはたいして難しくないが`yacc`自身
の先読みは非常にややこしい。なぜなら文法規則だけから実行時のあらゆる
入力パターンを予測して挙動を決めないといけないからだ。

もっとも、実際には「あらゆる」は無理なので「かなりの」パターンに対処す
ることになる。そして全パターンのうちどのくらいの範囲に対処できるかどう
かが先読みアルゴリズムの強さになるわけだ。`yacc`が文法ファイル処理時に
使っている先読みアルゴリズムはLALR(1)と言い、現存する衝突解決アルゴリ
ズムの中ではわりと強力なものである。

I mentioned this, but in this book we will only read rules and don't write
any. No reason to worry. What I wanted to explain here isn't the read ahead
when using a grammar but the read ahead at execution time.
いろいろ言ったが、本書でやるのは規則を読むだけで書くことではないので、
あまり心配することはない。ここで説明したかったのは文法を使った先読みで
はなく実行時の先読みのほうだ。

h3. Precedence of Operators

We stayed in the abstract but now we'll be a bit more concrete.
Let's define dyadic operators like `+` and `*`. There is a standard
way of doing this. Below is 
the definition of a calculator with the four basic arithmetic operators.

<pre class="emlist">
expr    : expr '+' expr
        | expr '-' expr
        | expr '*' expr
        | expr '/' expr
        | primary

primary : NUMBER
        | '(' expr ')'
</pre>

The smallest grammatical unit is `primary`. An `expr` can 
be made into a `primary` again by enclosing it in parentheses. 


When we write this grammar to a file and compile it the result is this.

<pre class="screen">
% yacc infix.y
16 shift/reduce conflicts
</pre>

It collided heavily. You'd probably find it out yourself within
5 minutes but that's the problem.

<pre class="emlist">
1 - 1 - 1
</pre>

This expression can be interpreted in the two ways below.

<pre class="emlist">
(1 - 1) - 1
1 - (1 - 1)
</pre>

As an arithmetic term of course the former is more natural. 
But `yacc` only processes what it sees and has no conception of
meaning. It doesn't spend a thought on what subtraction means.
So we humans have to provide it with enough hints, that `yacc`
does what we want it to do.

数式として自然なのはもちろん前者だ。しかし`yacc`がやるのはあくまで見ため
の処理であって、そこに意味は全く入らない。`-`という記号の持つ意味なんてこれっ
ぽちも考慮してはくれないのだ。人間の意図を正しく反映させるには、やりた
いことを地道に指示してやらないといけない。

We can add these lines in the definition part.

<pre class="emlist">
%left '+' '-'
%left '*' '/'
</pre>

These commands show the precedence and binding type of the operators.
Let's explain this in order.
この命令は演算子の優先順位と結合性の二つを同時に指定する。
順番に説明していこう。

Precendence often comes up when talking about the grammar of a programming
language. Theoretically it's more complicated but intuitively 
precedence controls where implicit parantheses are in the following expression.

<pre class="emlist">
1 + 2 * 3
</pre>

If `*` has the higher precedence it becomes this.

<pre class="emlist">
1 + (2 * 3)
</pre>

And if `+` has the higher precedence it becomes this.

<pre class="emlist">
(1 + 2) * 3
</pre>

In this way precedence directs which operators are strong 
and which are weak. So shift/reduce conflicts can be resolved.

But what if the precedence is the same? Like in this case.

<pre class="emlist">
1 - 2 - 3
</pre>

Here both are `-`, so the precedence is exactly the same. In this
case the binding type comes into play and solves the conflict.
There are three binding types: `left`, `right`, and `nonassoc`.
They solve the conflict as shown below.

|binding type|Interpretation|
|left(left binding)|`(1 - 2) - 3`|
|right(right binding)|`1 - (2 - 3)`|
|nonassoc(non binding)|parser error|

Almost all arithmetic operators are left binding. 
Right binding are for instance the assignment operator `=`
and the logical operator `not`.

<pre class="emlist">
a = b = 1    # (a = (b = 1))
not not a    # (not (not a))
</pre>


The comparison operators are `nonassoc`.

<pre class="emlist">
a == b == c   # parser error
a <= b <= c   # parser error
</pre>

Of course in Python this would be valid. But in Ruby it's not.

The `yacc` commands `%left`,`%right` and `%nonassoc` show the
binding type. The order in which they are listed shows the 
precedence order. The later ones have higher precedence.

<pre class="emlist">
%left  '+' '-'    /* Left binding, lowest precedence */
%left  '*' '/'    /* Left binding */
%right '!'        /* Right binding, highest precedence */
</pre>
